#include <WiFi.h>
#include "arduino_secrets.h" 

///////please enter your sensitive data in the Secret tab/arduino_secrets.h
char ssid[] = SECRET_SSID;        // your network SSID (name)
char pass[] = SECRET_PASS;

WiFiServer server(80);

// Player names
String playerAName = "Player A";
String playerBName = "Player B";
int pointsA = 0;
int pointsB = 0;
int CurrentServe = 1;

const int pushButtonA = 2;
const int pushButtonB = 3;
const int LEDa = 4;
const int LEDb = 5;
const int Buzzer = 6;

unsigned long buttonALastPressedTime = 0;
unsigned long buttonBLastPressedTime = 0;
int buttonALastState = HIGH;
int buttonBLastState = HIGH;

void setup() {
    Serial.begin(9600);
    WiFi.begin(ssid, pass);

    Serial.print("Connecting to ");
    Serial.println(ssid);
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }

    Serial.println("Connected to Wi-Fi");
    Serial.print("IP Address: ");
    Serial.println(WiFi.localIP());

    server.begin();

    pinMode(pushButtonA, INPUT_PULLUP);
    pinMode(pushButtonB, INPUT_PULLUP);
    pinMode(LEDa, OUTPUT);
    pinMode(LEDb, OUTPUT);
    pinMode(Buzzer, OUTPUT);

    startgame();
}

void loop() {
    WiFiClient client = server.available();
    if (client) {
        Serial.println("New Client");
        String request = "";
        while (client.connected()) {
            if (client.available()) {
                char c = client.read();
                request += c;
                if (request.endsWith("\r\n\r\n")) {
                    break;
                }
            }
        }

        if (request.indexOf("GET /update") >= 0) {
            String response = "HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n";
            response += "{";
            response += "\"pointsA\": " + String(pointsA) + ",";
            response += "\"pointsB\": " + String(pointsB) + ",";
            response += "\"CurrentServe\": " + String(CurrentServe) + ",";
            response += "\"playerAName\": \"" + playerAName + "\",";
            response += "\"playerBName\": \"" + playerBName + "\"";
            response += "}";
            client.print(response);
        } else if (request.indexOf("GET /save") >= 0) {
            int playerAStart = request.indexOf("playerA=") + 8;
            int playerAEnd = request.indexOf("&", playerAStart);
            if (playerAEnd == -1) playerAEnd = request.length();
            playerAName = request.substring(playerAStart, playerAEnd);

            int playerBStart = request.indexOf("playerB=") + 8;
            int playerBEnd = request.indexOf(" ", playerBStart);
            if (playerBEnd == -1) playerBEnd = request.length();
            playerBName = request.substring(playerBStart, playerBEnd);

            Serial.println("Player names updated");
            Serial.print("Player A Name: ");
            Serial.println(playerAName);
            Serial.print("Player B Name: ");
            Serial.println(playerBName);

            String response = "HTTP/1.1 200 OK\r\nContent-Type: text/html\r\n\r\n";
            response += "<html><body><h1>Settings Saved</h1><p><a href=\"/\">Back to Home</a></p></body></html>";
            client.print(response);
        } else {
            if (request.indexOf("GET /H") >= 0) {
                pointsA += 1;
                Serial.println("Increased Player A's score");
                ServerCheck();
                Buzzeradd();
            } else if (request.indexOf("GET /L") >= 0) {
                pointsB += 1;
                Serial.println("Increased Player B's score");
                ServerCheck();
                Buzzeradd();
            }

            String response = "HTTP/1.1 200 OK\r\nContent-Type: text/html\r\n\r\n";
            response += "<!DOCTYPE html>\n<html>\n<head>\n";
            response += "<title>Ping Pong Scorer</title>\n";
            response += "<style>body { font-family: Arial, sans-serif; text-align: center; margin: 0; padding: 0; background-color: #f4f4f4; }\n";
            response += "h1 { color: #333; }\n";
            response += "p { font-size: 20px; }\n";
            response += "a { text-decoration: none; color: #1e90ff; }\n";
            response += "a:hover { text-decoration: underline; }\n";
            response += "#settings { display: none; position: absolute; top: 10px; right: 10px; border: 1px solid #ccc; padding: 10px; background-color: white; box-shadow: 0 0 10px rgba(0,0,0,0.1); }\n";
            response += "</style>\n";
            response += "</head>\n<body>\n";
            response += "<h1>Ping Pong Scorer</h1>\n";
            response += "<p id='scoreA'>" + playerAName + ": " + String(pointsA) + "</p>\n";
            response += "<p id='scoreB'>" + playerBName + ": " + String(pointsB) + "</p>\n";
            response += "<p id='server'>Current Server: " + (CurrentServe == 1 ? playerAName : playerBName) + "</p>\n";
            response += "<p><a href=\"/H\">Increase " + playerAName + "'s score</a></p>\n";
            response += "<p><a href=\"/L\">Increase " + playerBName + "'s score</a></p>\n";
            response += "<button onclick='toggleSettings()'>Settings</button>\n";
            response += "<div id='settings'>\n";
            response += "<h2>Settings</h2>\n";
            response += "<form onsubmit='saveSettings(event)'>\n";
            response += "<label for='playerA'>Player A Name:(Black)</label>\n";
            response += "<input type='text' id='playerA' name='playerA' value='" + playerAName + "'>\n";
            response += "<br>\n";
            response += "<label for='playerB'>Player B Name: (Yellow)</label>\n";
            response += "<input type='text' id='playerB' name='playerB' value='" + playerBName + "'>\n";
            response += "<br>\n";
            response += "<input type='submit' value='Save'>\n";
            response += "</form>\n";
            response += "<button onclick='toggleSettings()'>Close</button>\n";
            response += "</div>\n";
            response += "<script>";
            response += "function updateScores() {";
            response += "  var xhr = new XMLHttpRequest();";
            response += "  xhr.open('GET', '/update', true);";
            response += "  xhr.onload = function() {";
            response += "    if (xhr.status === 200) {";
            response += "      var data = JSON.parse(xhr.responseText);";
            response += "      document.getElementById('scoreA').innerText = data.playerAName + ': ' + data.pointsA;";
            response += "      document.getElementById('scoreB').innerText = data.playerBName + ': ' + data.pointsB;";
            response += "      document.getElementById('server').innerText = 'Current Server: ' + (data.CurrentServe === 1 ? data.playerAName : data.playerBName);";
            response += "    }";
            response += "  };";
            response += "  xhr.send();";
            response += "}";
            response += "setInterval(updateScores, 2000);";
            response += "function toggleSettings() {";
            response += "  var settingsDiv = document.getElementById('settings');";
            response += "  if (settingsDiv.style.display === 'none') {";
            response += "    settingsDiv.style.display = 'block';";
            response += "  } else {";
            response += "    settingsDiv.style.display = 'none';";
            response += "  }";
            response += "}";
            response += "function saveSettings(event) {";
            response += "  event.preventDefault();";
            response += "  var playerA = document.getElementById('playerA').value;";
            response += "  var playerB = document.getElementById('playerB').value;";
            response += "  var xhr = new XMLHttpRequest();";
            response += "  xhr.open('GET', '/save?playerA=' + encodeURIComponent(playerA) + '&playerB=' + encodeURIComponent(playerB), true);";
            response += "  xhr.send();";
            response += "  toggleSettings();";
            response += "}";
            response += "</script>";
            response += "</body>\n</html>\n";

            client.print(response);
        }

        delay(1);
        client.stop();
        Serial.println("Client Disconnected");
    }

    // Handle button A
    unsigned long buttonAHoldTime = 0;
    if (buttonALastState == HIGH) {
        if (digitalRead(pushButtonA) == LOW) {
            buttonALastPressedTime = millis();
            buttonALastState = LOW;
        }
    } else {
        if (digitalRead(pushButtonA) == HIGH) {
            buttonAHoldTime = millis() - buttonALastPressedTime;
            buttonALastState = HIGH;
        }
    }

    if (buttonAHoldTime > 10 && buttonAHoldTime < 1000) {
        pointsA += 1;
        Serial.println("Button A Pressed: Increased Player A's score");
        ServerCheck();
        Buzzeradd();
    } else if (buttonAHoldTime > 1000 && buttonAHoldTime < 2500) {
        pointsA -= 1;
        Serial.println("Button A Pressed: Decreased Player A's score");
        Buzzerdeduct();
    } else if (buttonAHoldTime > 2500) {
        startgame();
    }

    // Handle button B
    unsigned long buttonBHoldTime = 0;
    if (buttonBLastState == HIGH) {
        if (digitalRead(pushButtonB) == LOW) {
            buttonBLastPressedTime = millis();
            buttonBLastState = LOW;
        }
    } else {
        if (digitalRead(pushButtonB) == HIGH) {
            buttonBHoldTime = millis() - buttonBLastPressedTime;
            buttonBLastState = HIGH;
        }
    }

    if (buttonBHoldTime > 10 && buttonBHoldTime < 1000) {
        pointsB += 1;
        Serial.println("Button B Pressed: Increased Player B's score");
        ServerCheck();
        Buzzeradd();
    } else if (buttonBHoldTime > 1000 && buttonBHoldTime < 2500) {
        pointsB -= 1;
        Serial.println("Button B Pressed: Decreased Player B's score");
        Buzzerdeduct();
    } else if (buttonBHoldTime > 2500) {
        pointsA = 0;
        pointsB = 0;
        update();
        startgame();
    }
}

void startgame() {
    pointsA = 0;
    pointsB = 0;
    for (int i = 0; i < 3; i++) {
        digitalWrite(LEDa, HIGH);
        digitalWrite(LEDb, LOW);
        delay(550);
        digitalWrite(LEDa, LOW);
        digitalWrite(LEDb, HIGH);
        delay(550);
    }
    randomSeed(analogRead(0));
    int randNum = random(1, 3);
    if (randNum == 1) {
        digitalWrite(LEDa, HIGH);
        digitalWrite(LEDb, LOW);
        CurrentServe = 1;
    } else {
        CurrentServe = 2;
        digitalWrite(LEDa, LOW);
        digitalWrite(LEDb, HIGH);
    }
    update();
}

void ServerCheck() {
    int point = pointsA + pointsB;
    if (point % 5 == 0) {
        if (CurrentServe == 1) {
            CurrentServe = 2;
            digitalWrite(LEDb, HIGH);
            digitalWrite(LEDa, LOW);
            update();
        } else {
            CurrentServe = 1;
            digitalWrite(LEDa, HIGH);
            digitalWrite(LEDb, LOW);
            update();
        }
    }
}

void update() {
    WiFiClient client = server.available();
    if (client) {
        String request = "";
        while (client.connected()) {
            if (client.available()) {
                char c = client.read();
                request += c;
                if (request.endsWith("\r\n\r\n")) {
                    break;
                }
            }
        }

        if (request.indexOf("GET /update") >= 0) {
            String response = "HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n";
            response += "{";
            response += "\"pointsA\": " + String(pointsA) + ",";
            response += "\"pointsB\": " + String(pointsB) + ",";
            response += "\"CurrentServe\": " + String(CurrentServe) + ",";
            response += "\"playerAName\": \"" + playerAName + "\",";
            response += "\"playerBName\": \"" + playerBName + "\"";
            response += "}";
            client.print(response);
        }
        delay(1);
        client.stop();
    }
}

void Buzzeradd() {
    tone(Buzzer, 1000, 100);
}

void Buzzerdeduct() {
    tone(Buzzer, 500, 100);
}
